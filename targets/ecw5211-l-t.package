#!/bin/bash
# SPDX-License-Identifier: MIT
#
# Copyright (c) 2021 Sartura Ltd.
#

source /etc/profile

set -e
set -u
shopt -s nullglob

# Target variables
TDEVICE=ipq40xx-${BTARGET}

# Output variables
ODIR=/output
OTMP=$(mktemp -d)
OROOTFS=${WITH_ROOTFS:-0}
export XZ_OPT="-2 -T0" # multithreaded

# Check whether the output directory exists
if [[ ! -d ${ODIR} ]]; then
	echo "docker-entrypoint: output directory does not exist!"
	exit 1
fi

# Device flash hardware parameters
peb_size=128KiB # -p
leb_size=126976 # -e
block_size=128k # -b
min_io_size=2048 # -m
max_leb_cnt=2048 # -c
dtb_file=qcom-ipq4018-ecw5211-l-t.dtb

# This file contains various data about installed packages, depgraph, etc.
mv ${SYSROOT}/sysdesc ${ODIR}/sysdesc-${TPARCH}-${TDEVICE}.txt

# The kernel will be packaged outside of the root filesystem
mv ${SYSROOT}/boot ${OTMP}/kernel

OIMG="${ODIR}/gentoo-${TPARCH}-${TDEVICE}.ubi"

# Generate kernel files
gzip -f -9n -c ${OTMP}/kernel/Image > ${OTMP}/kernel/uImage.gzip
/usr/local/bin/mkits.sh \
	-A arm \
	-c "config-1" \
	-D "Edgecore ECW5211-L (T)" \
	-k ${OTMP}/kernel/uImage.gzip \
	-C gzip -a 0x80208000 -e 0x80208000 -v '5.14.y' \
	-d ${OTMP}/kernel/dtbs/${dtb_file} \
	-o ${OTMP}/kernel/uImage.its
mkimage -f ${OTMP}/kernel/uImage.its ${OTMP}/kernel/uImage.itb

# Gnerate SquashFS with ZSTD for OverlayFS
mkfs.ubifs -x zstd -m ${min_io_size} -e ${leb_size} -c ${max_leb_cnt} -F \
	-r ${SYSROOT} ${OTMP}/rootfs.ubifs

# Generate UBI image
/usr/local/bin/ubinize-image.sh \
	--kernel ${OTMP}/kernel/uImage.itb ${OTMP}/rootfs.ubifs \
	${OIMG} \
	-m ${min_io_size} -p ${peb_size}

if (( OROOTFS )); then
	# Package the root filesystem as a compressed archive
	# NOTE: We use `.` to specify contents of the current (SYSROOT) directory.
	OIMG="${ODIR}/rootfs-${TPARCH}-${TDEVICE}.tar.xz"
	tar --directory=${SYSROOT} --totals --create --xz --file ${OIMG} .
fi

# Flush cached writes
sync